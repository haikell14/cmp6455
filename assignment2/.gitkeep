<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="initial-scale=1,user-scalable=no,maximum-scale=1,width=device-width">
        <meta name="mobile-web-app-capable" content="yes">
        <meta name="apple-mobile-web-app-capable" content="yes">
        <link rel="stylesheet" href="css/leaflet.css">
        <link rel="stylesheet" href="css/L.Control.Layers.Tree.css">
        <link rel="stylesheet" href="css/qgis2web.css">
        <link rel="stylesheet" href="css/fontawesome-all.min.css">
        <style>
        #map {
            width: 1149px;
            height: 683px;
        }
        </style>
        <title></title>
    </head>
    <body>
        <div id="map">
        </div>
        <script src="js/qgis2web_expressions.js"></script>
        <script src="js/leaflet.js"></script>
        <script src="js/L.Control.Layers.Tree.min.js"></script>
        <script src="js/leaflet.rotatedMarker.js"></script>
        <script src="js/leaflet.pattern.js"></script>
        <script src="js/leaflet-hash.js"></script>
        <script src="js/Autolinker.min.js"></script>
        <script src="js/rbush.min.js"></script>
        <script src="js/labelgun.min.js"></script>
        <script src="js/labels.js"></script>
        <script src="data/SLCo_boundary_1.js"></script>
        <script src="data/census_tracts_2.js"></script>
        <script src="data/pedestrian_crashes_2015_3.js"></script>
        <script src="data/pedestrian_crashes_2016_4.js"></script>
        <script src="data/pedestrian_crashes_2017_5.js"></script>
        <script src="data/pedestrian_crashes_2018_6.js"></script>
        <script src="data/pedestrian_crashes_2019_7.js"></script>
        <script>
        var highlightLayer;
        function highlightFeature(e) {
            highlightLayer = e.target;
            highlightLayer.openPopup();
        }
        var map = L.map('map', {
            zoomControl:false, maxZoom:28, minZoom:1
        }).fitBounds([[40.381826334571414,-112.40923675558128],[40.920945821693486,-111.22003083312089]]);
        var hash = new L.Hash(map);
        map.attributionControl.setPrefix('<a href="https://github.com/tomchadwin/qgis2web" target="_blank">qgis2web</a> &middot; <a href="https://leafletjs.com" title="A JS library for interactive maps">Leaflet</a> &middot; <a href="https://qgis.org">QGIS</a>');
        var autolinker = new Autolinker({truncate: {length: 30, location: 'smart'}});
        // remove popup's row if "visible-with-data"
        function removeEmptyRowsFromPopupContent(content, feature) {
         var tempDiv = document.createElement('div');
         tempDiv.innerHTML = content;
         var rows = tempDiv.querySelectorAll('tr');
         for (var i = 0; i < rows.length; i++) {
             var td = rows[i].querySelector('td.visible-with-data');
             var key = td ? td.id : '';
             if (td && td.classList.contains('visible-with-data') && feature.properties[key] == null) {
                 rows[i].parentNode.removeChild(rows[i]);
             }
         }
         return tempDiv.innerHTML;
        }
        // add class to format popup if it contains media
		function addClassToPopupIfMedia(content, popup) {
			var tempDiv = document.createElement('div');
			tempDiv.innerHTML = content;
			if (tempDiv.querySelector('td img')) {
				popup._contentNode.classList.add('media');
					// Delay to force the redraw
					setTimeout(function() {
						popup.update();
					}, 10);
			} else {
				popup._contentNode.classList.remove('media');
			}
		}
        var zoomControl = L.control.zoom({
            position: 'topleft'
        }).addTo(map);
        var bounds_group = new L.featureGroup([]);
        function setBounds() {
        }
        map.createPane('pane_CartoLight_0');
        map.getPane('pane_CartoLight_0').style.zIndex = 400;
        var layer_CartoLight_0 = L.tileLayer('https://a.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.pn', {
            pane: 'pane_CartoLight_0',
            opacity: 1.0,
            attribution: '',
            minZoom: 1,
            maxZoom: 28,
        });
        layer_CartoLight_0;
        map.addLayer(layer_CartoLight_0);
        function pop_SLCo_boundary_1(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['COUNTYNBR'] !== null ? autolinker.link(String(feature.properties['COUNTYNBR']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ENTITYNBR'] !== null ? autolinker.link(String(feature.properties['ENTITYNBR']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ENTITYYR'] !== null ? autolinker.link(String(feature.properties['ENTITYYR']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['NAME'] !== null ? autolinker.link(String(feature.properties['NAME']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['FIPS'] !== null ? autolinker.link(String(feature.properties['FIPS']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['STATEPLANE'] !== null ? autolinker.link(String(feature.properties['STATEPLANE']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['POP_LASTCE'] !== null ? autolinker.link(String(feature.properties['POP_LASTCE']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['POP_CURRES'] !== null ? autolinker.link(String(feature.properties['POP_CURRES']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['GlobalID'] !== null ? autolinker.link(String(feature.properties['GlobalID']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['FIPS_STR'] !== null ? autolinker.link(String(feature.properties['FIPS_STR']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['COLOR4'] !== null ? autolinker.link(String(feature.properties['COLOR4']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            var content = removeEmptyRowsFromPopupContent(popupContent, feature);
			layer.on('popupopen', function(e) {
				addClassToPopupIfMedia(content, e.popup);
			});
			layer.bindPopup(content, { maxHeight: 400 });
        }

        function style_SLCo_boundary_1_0() {
            return {
                pane: 'pane_SLCo_boundary_1',
                opacity: 1,
                color: 'rgba(0,0,0,1.0)',
                dashArray: '16.0,8.0',
                lineCap: 'square',
                lineJoin: 'bevel',
                weight: 4.0,
                fillOpacity: 0,
                interactive: true,
            }
        }
        map.createPane('pane_SLCo_boundary_1');
        map.getPane('pane_SLCo_boundary_1').style.zIndex = 401;
        map.getPane('pane_SLCo_boundary_1').style['mix-blend-mode'] = 'normal';
        var layer_SLCo_boundary_1 = new L.geoJson(json_SLCo_boundary_1, {
            attribution: '',
            interactive: true,
            dataVar: 'json_SLCo_boundary_1',
            layerName: 'layer_SLCo_boundary_1',
            pane: 'pane_SLCo_boundary_1',
            onEachFeature: pop_SLCo_boundary_1,
            style: style_SLCo_boundary_1_0,
        });
        bounds_group.addLayer(layer_SLCo_boundary_1);
        map.addLayer(layer_SLCo_boundary_1);
        function pop_census_tracts_2(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['STATEFP10'] !== null ? autolinker.link(String(feature.properties['STATEFP10']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['COUNTYFP10'] !== null ? autolinker.link(String(feature.properties['COUNTYFP10']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['TRACTCE10'] !== null ? autolinker.link(String(feature.properties['TRACTCE10']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['GEOID10'] !== null ? autolinker.link(String(feature.properties['GEOID10']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['NAME10'] !== null ? autolinker.link(String(feature.properties['NAME10']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['FUNCSTAT10'] !== null ? autolinker.link(String(feature.properties['FUNCSTAT10']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['INTPTLAT10'] !== null ? autolinker.link(String(feature.properties['INTPTLAT10']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['INTPTLON10'] !== null ? autolinker.link(String(feature.properties['INTPTLON10']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['LOGRECNO'] !== null ? autolinker.link(String(feature.properties['LOGRECNO']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['AREALAND'] !== null ? autolinker.link(String(feature.properties['AREALAND']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['AREAWATR'] !== null ? autolinker.link(String(feature.properties['AREAWATR']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['POP100'] !== null ? autolinker.link(String(feature.properties['POP100']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['HU100'] !== null ? autolinker.link(String(feature.properties['HU100']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['P0020001'] !== null ? autolinker.link(String(feature.properties['P0020001']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['P0020002'] !== null ? autolinker.link(String(feature.properties['P0020002']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['P0020003'] !== null ? autolinker.link(String(feature.properties['P0020003']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['P0020004'] !== null ? autolinker.link(String(feature.properties['P0020004']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['P0020005'] !== null ? autolinker.link(String(feature.properties['P0020005']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['P0020006'] !== null ? autolinker.link(String(feature.properties['P0020006']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['P0020007'] !== null ? autolinker.link(String(feature.properties['P0020007']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['P0020008'] !== null ? autolinker.link(String(feature.properties['P0020008']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['P0020009'] !== null ? autolinker.link(String(feature.properties['P0020009']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['P0020010'] !== null ? autolinker.link(String(feature.properties['P0020010']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['MTFCC'] !== null ? autolinker.link(String(feature.properties['MTFCC']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['P0010011'] !== null ? autolinker.link(String(feature.properties['P0010011']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['P0010012'] !== null ? autolinker.link(String(feature.properties['P0010012']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['P0010013'] !== null ? autolinker.link(String(feature.properties['P0010013']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['P0010014'] !== null ? autolinker.link(String(feature.properties['P0010014']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['SqMiles'] !== null ? autolinker.link(String(feature.properties['SqMiles']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            var content = removeEmptyRowsFromPopupContent(popupContent, feature);
			layer.on('popupopen', function(e) {
				addClassToPopupIfMedia(content, e.popup);
			});
			layer.bindPopup(content, { maxHeight: 400 });
        }

        function style_census_tracts_2_0() {
            return {
                pane: 'pane_census_tracts_2',
                opacity: 1,
                color: 'rgba(38,89,128,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1.0, 
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(55,126,184,1.0)',
                interactive: false,
            }
        }
        map.createPane('pane_census_tracts_2');
        map.getPane('pane_census_tracts_2').style.zIndex = 402;
        map.getPane('pane_census_tracts_2').style['mix-blend-mode'] = 'normal';
        var layer_census_tracts_2 = new L.geoJson(json_census_tracts_2, {
            attribution: '',
            interactive: false,
            dataVar: 'json_census_tracts_2',
            layerName: 'layer_census_tracts_2',
            pane: 'pane_census_tracts_2',
            onEachFeature: pop_census_tracts_2,
            style: style_census_tracts_2_0,
        });
        bounds_group.addLayer(layer_census_tracts_2);
        map.addLayer(layer_census_tracts_2);
        function pop_pedestrian_crashes_2015_3(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <th scope="row">pk</th>\
                        <td>' + (feature.properties['pk'] !== null ? autolinker.link(String(feature.properties['pk']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">objectid</th>\
                        <td>' + (feature.properties['objectid'] !== null ? autolinker.link(String(feature.properties['objectid']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">crash_id</th>\
                        <td>' + (feature.properties['crash_id'] !== null ? autolinker.link(String(feature.properties['crash_id']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">crash_date</th>\
                        <td>' + (feature.properties['crash_date'] !== null ? autolinker.link(String(feature.properties['crash_date']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">route</th>\
                        <td>' + (feature.properties['route'] !== null ? autolinker.link(String(feature.properties['route']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">milepoint</th>\
                        <td>' + (feature.properties['milepoint'] !== null ? autolinker.link(String(feature.properties['milepoint']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">gcs_lat</th>\
                        <td>' + (feature.properties['gcs_lat'] !== null ? autolinker.link(String(feature.properties['gcs_lat']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">gcs_long</th>\
                        <td>' + (feature.properties['gcs_long'] !== null ? autolinker.link(String(feature.properties['gcs_long']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">main_road_</th>\
                        <td>' + (feature.properties['main_road_'] !== null ? autolinker.link(String(feature.properties['main_road_']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">city</th>\
                        <td>' + (feature.properties['city'] !== null ? autolinker.link(String(feature.properties['city']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">county_nam</th>\
                        <td>' + (feature.properties['county_nam'] !== null ? autolinker.link(String(feature.properties['county_nam']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">crash_seve</th>\
                        <td>' + (feature.properties['crash_seve'] !== null ? autolinker.link(String(feature.properties['crash_seve']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">work_zone_</th>\
                        <td>' + (feature.properties['work_zone_'] !== null ? autolinker.link(String(feature.properties['work_zone_']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">pedestrian</th>\
                        <td>' + (feature.properties['pedestrian'] !== null ? autolinker.link(String(feature.properties['pedestrian']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">bicyclist_</th>\
                        <td>' + (feature.properties['bicyclist_'] !== null ? autolinker.link(String(feature.properties['bicyclist_']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">motorcycle</th>\
                        <td>' + (feature.properties['motorcycle'] !== null ? autolinker.link(String(feature.properties['motorcycle']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">improper_r</th>\
                        <td>' + (feature.properties['improper_r'] !== null ? autolinker.link(String(feature.properties['improper_r']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">unrestrain</th>\
                        <td>' + (feature.properties['unrestrain'] !== null ? autolinker.link(String(feature.properties['unrestrain']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">dui</th>\
                        <td>' + (feature.properties['dui'] !== null ? autolinker.link(String(feature.properties['dui']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">intersecti</th>\
                        <td>' + (feature.properties['intersecti'] !== null ? autolinker.link(String(feature.properties['intersecti']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">wild_anima</th>\
                        <td>' + (feature.properties['wild_anima'] !== null ? autolinker.link(String(feature.properties['wild_anima']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">domestic_a</th>\
                        <td>' + (feature.properties['domestic_a'] !== null ? autolinker.link(String(feature.properties['domestic_a']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">overturn_r</th>\
                        <td>' + (feature.properties['overturn_r'] !== null ? autolinker.link(String(feature.properties['overturn_r']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">commercial</th>\
                        <td>' + (feature.properties['commercial'] !== null ? autolinker.link(String(feature.properties['commercial']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">teenage_dr</th>\
                        <td>' + (feature.properties['teenage_dr'] !== null ? autolinker.link(String(feature.properties['teenage_dr']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">older_driv</th>\
                        <td>' + (feature.properties['older_driv'] !== null ? autolinker.link(String(feature.properties['older_driv']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">night_dark</th>\
                        <td>' + (feature.properties['night_dark'] !== null ? autolinker.link(String(feature.properties['night_dark']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">single_veh</th>\
                        <td>' + (feature.properties['single_veh'] !== null ? autolinker.link(String(feature.properties['single_veh']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">distracted</th>\
                        <td>' + (feature.properties['distracted'] !== null ? autolinker.link(String(feature.properties['distracted']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">drowsy_dri</th>\
                        <td>' + (feature.properties['drowsy_dri'] !== null ? autolinker.link(String(feature.properties['drowsy_dri']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">roadway_de</th>\
                        <td>' + (feature.properties['roadway_de'] !== null ? autolinker.link(String(feature.properties['roadway_de']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">YEAR</th>\
                        <td>' + (feature.properties['YEAR'] !== null ? autolinker.link(String(feature.properties['YEAR']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            var content = removeEmptyRowsFromPopupContent(popupContent, feature);
			layer.on('popupopen', function(e) {
				addClassToPopupIfMedia(content, e.popup);
			});
			layer.bindPopup(content, { maxHeight: 400 });
        }

        function style_pedestrian_crashes_2015_3_0() {
            return {
                pane: 'pane_pedestrian_crashes_2015_3',
                radius: 4.0,
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(196,60,57,1.0)',
                interactive: true,
            }
        }
        map.createPane('pane_pedestrian_crashes_2015_3');
        map.getPane('pane_pedestrian_crashes_2015_3').style.zIndex = 403;
        map.getPane('pane_pedestrian_crashes_2015_3').style['mix-blend-mode'] = 'normal';
        var layer_pedestrian_crashes_2015_3 = new L.geoJson(json_pedestrian_crashes_2015_3, {
            attribution: '',
            interactive: true,
            dataVar: 'json_pedestrian_crashes_2015_3',
            layerName: 'layer_pedestrian_crashes_2015_3',
            pane: 'pane_pedestrian_crashes_2015_3',
            onEachFeature: pop_pedestrian_crashes_2015_3,
            pointToLayer: function (feature, latlng) {
                var context = {
                    feature: feature,
                    variables: {}
                };
                return L.circleMarker(latlng, style_pedestrian_crashes_2015_3_0(feature));
            },
        });
        bounds_group.addLayer(layer_pedestrian_crashes_2015_3);
        map.addLayer(layer_pedestrian_crashes_2015_3);
        function pop_pedestrian_crashes_2016_4(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <th scope="row">pk</th>\
                        <td>' + (feature.properties['pk'] !== null ? autolinker.link(String(feature.properties['pk']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">objectid</th>\
                        <td>' + (feature.properties['objectid'] !== null ? autolinker.link(String(feature.properties['objectid']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">crash_id</th>\
                        <td>' + (feature.properties['crash_id'] !== null ? autolinker.link(String(feature.properties['crash_id']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">crash_date</th>\
                        <td>' + (feature.properties['crash_date'] !== null ? autolinker.link(String(feature.properties['crash_date']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">route</th>\
                        <td>' + (feature.properties['route'] !== null ? autolinker.link(String(feature.properties['route']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">milepoint</th>\
                        <td>' + (feature.properties['milepoint'] !== null ? autolinker.link(String(feature.properties['milepoint']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">gcs_lat</th>\
                        <td>' + (feature.properties['gcs_lat'] !== null ? autolinker.link(String(feature.properties['gcs_lat']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">gcs_long</th>\
                        <td>' + (feature.properties['gcs_long'] !== null ? autolinker.link(String(feature.properties['gcs_long']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">main_road_</th>\
                        <td>' + (feature.properties['main_road_'] !== null ? autolinker.link(String(feature.properties['main_road_']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">city</th>\
                        <td>' + (feature.properties['city'] !== null ? autolinker.link(String(feature.properties['city']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">county_nam</th>\
                        <td>' + (feature.properties['county_nam'] !== null ? autolinker.link(String(feature.properties['county_nam']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">crash_seve</th>\
                        <td>' + (feature.properties['crash_seve'] !== null ? autolinker.link(String(feature.properties['crash_seve']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">work_zone_</th>\
                        <td>' + (feature.properties['work_zone_'] !== null ? autolinker.link(String(feature.properties['work_zone_']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">pedestrian</th>\
                        <td>' + (feature.properties['pedestrian'] !== null ? autolinker.link(String(feature.properties['pedestrian']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">bicyclist_</th>\
                        <td>' + (feature.properties['bicyclist_'] !== null ? autolinker.link(String(feature.properties['bicyclist_']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">motorcycle</th>\
                        <td>' + (feature.properties['motorcycle'] !== null ? autolinker.link(String(feature.properties['motorcycle']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">improper_r</th>\
                        <td>' + (feature.properties['improper_r'] !== null ? autolinker.link(String(feature.properties['improper_r']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">unrestrain</th>\
                        <td>' + (feature.properties['unrestrain'] !== null ? autolinker.link(String(feature.properties['unrestrain']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">dui</th>\
                        <td>' + (feature.properties['dui'] !== null ? autolinker.link(String(feature.properties['dui']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">intersecti</th>\
                        <td>' + (feature.properties['intersecti'] !== null ? autolinker.link(String(feature.properties['intersecti']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">wild_anima</th>\
                        <td>' + (feature.properties['wild_anima'] !== null ? autolinker.link(String(feature.properties['wild_anima']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">domestic_a</th>\
                        <td>' + (feature.properties['domestic_a'] !== null ? autolinker.link(String(feature.properties['domestic_a']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">overturn_r</th>\
                        <td>' + (feature.properties['overturn_r'] !== null ? autolinker.link(String(feature.properties['overturn_r']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">commercial</th>\
                        <td>' + (feature.properties['commercial'] !== null ? autolinker.link(String(feature.properties['commercial']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">teenage_dr</th>\
                        <td>' + (feature.properties['teenage_dr'] !== null ? autolinker.link(String(feature.properties['teenage_dr']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">older_driv</th>\
                        <td>' + (feature.properties['older_driv'] !== null ? autolinker.link(String(feature.properties['older_driv']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">night_dark</th>\
                        <td>' + (feature.properties['night_dark'] !== null ? autolinker.link(String(feature.properties['night_dark']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">single_veh</th>\
                        <td>' + (feature.properties['single_veh'] !== null ? autolinker.link(String(feature.properties['single_veh']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">distracted</th>\
                        <td>' + (feature.properties['distracted'] !== null ? autolinker.link(String(feature.properties['distracted']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">drowsy_dri</th>\
                        <td>' + (feature.properties['drowsy_dri'] !== null ? autolinker.link(String(feature.properties['drowsy_dri']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">roadway_de</th>\
                        <td>' + (feature.properties['roadway_de'] !== null ? autolinker.link(String(feature.properties['roadway_de']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">YEAR</th>\
                        <td>' + (feature.properties['YEAR'] !== null ? autolinker.link(String(feature.properties['YEAR']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            var content = removeEmptyRowsFromPopupContent(popupContent, feature);
			layer.on('popupopen', function(e) {
				addClassToPopupIfMedia(content, e.popup);
			});
			layer.bindPopup(content, { maxHeight: 400 });
        }

        function style_pedestrian_crashes_2016_4_0() {
            return {
                pane: 'pane_pedestrian_crashes_2016_4',
                radius: 4.0,
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(225,89,137,1.0)',
                interactive: true,
            }
        }
        map.createPane('pane_pedestrian_crashes_2016_4');
        map.getPane('pane_pedestrian_crashes_2016_4').style.zIndex = 404;
        map.getPane('pane_pedestrian_crashes_2016_4').style['mix-blend-mode'] = 'normal';
        var layer_pedestrian_crashes_2016_4 = new L.geoJson(json_pedestrian_crashes_2016_4, {
            attribution: '',
            interactive: true,
            dataVar: 'json_pedestrian_crashes_2016_4',
            layerName: 'layer_pedestrian_crashes_2016_4',
            pane: 'pane_pedestrian_crashes_2016_4',
            onEachFeature: pop_pedestrian_crashes_2016_4,
            pointToLayer: function (feature, latlng) {
                var context = {
                    feature: feature,
                    variables: {}
                };
                return L.circleMarker(latlng, style_pedestrian_crashes_2016_4_0(feature));
            },
        });
        bounds_group.addLayer(layer_pedestrian_crashes_2016_4);
        map.addLayer(layer_pedestrian_crashes_2016_4);
        function pop_pedestrian_crashes_2017_5(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <th scope="row">pk</th>\
                        <td>' + (feature.properties['pk'] !== null ? autolinker.link(String(feature.properties['pk']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">objectid</th>\
                        <td>' + (feature.properties['objectid'] !== null ? autolinker.link(String(feature.properties['objectid']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">crash_id</th>\
                        <td>' + (feature.properties['crash_id'] !== null ? autolinker.link(String(feature.properties['crash_id']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">crash_date</th>\
                        <td>' + (feature.properties['crash_date'] !== null ? autolinker.link(String(feature.properties['crash_date']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">route</th>\
                        <td>' + (feature.properties['route'] !== null ? autolinker.link(String(feature.properties['route']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">milepoint</th>\
                        <td>' + (feature.properties['milepoint'] !== null ? autolinker.link(String(feature.properties['milepoint']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">gcs_lat</th>\
                        <td>' + (feature.properties['gcs_lat'] !== null ? autolinker.link(String(feature.properties['gcs_lat']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">gcs_long</th>\
                        <td>' + (feature.properties['gcs_long'] !== null ? autolinker.link(String(feature.properties['gcs_long']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">main_road_</th>\
                        <td>' + (feature.properties['main_road_'] !== null ? autolinker.link(String(feature.properties['main_road_']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">city</th>\
                        <td>' + (feature.properties['city'] !== null ? autolinker.link(String(feature.properties['city']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">county_nam</th>\
                        <td>' + (feature.properties['county_nam'] !== null ? autolinker.link(String(feature.properties['county_nam']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">crash_seve</th>\
                        <td>' + (feature.properties['crash_seve'] !== null ? autolinker.link(String(feature.properties['crash_seve']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">work_zone_</th>\
                        <td>' + (feature.properties['work_zone_'] !== null ? autolinker.link(String(feature.properties['work_zone_']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">pedestrian</th>\
                        <td>' + (feature.properties['pedestrian'] !== null ? autolinker.link(String(feature.properties['pedestrian']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">bicyclist_</th>\
                        <td>' + (feature.properties['bicyclist_'] !== null ? autolinker.link(String(feature.properties['bicyclist_']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">motorcycle</th>\
                        <td>' + (feature.properties['motorcycle'] !== null ? autolinker.link(String(feature.properties['motorcycle']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">improper_r</th>\
                        <td>' + (feature.properties['improper_r'] !== null ? autolinker.link(String(feature.properties['improper_r']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">unrestrain</th>\
                        <td>' + (feature.properties['unrestrain'] !== null ? autolinker.link(String(feature.properties['unrestrain']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">dui</th>\
                        <td>' + (feature.properties['dui'] !== null ? autolinker.link(String(feature.properties['dui']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">intersecti</th>\
                        <td>' + (feature.properties['intersecti'] !== null ? autolinker.link(String(feature.properties['intersecti']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">wild_anima</th>\
                        <td>' + (feature.properties['wild_anima'] !== null ? autolinker.link(String(feature.properties['wild_anima']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">domestic_a</th>\
                        <td>' + (feature.properties['domestic_a'] !== null ? autolinker.link(String(feature.properties['domestic_a']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">overturn_r</th>\
                        <td>' + (feature.properties['overturn_r'] !== null ? autolinker.link(String(feature.properties['overturn_r']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">commercial</th>\
                        <td>' + (feature.properties['commercial'] !== null ? autolinker.link(String(feature.properties['commercial']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">teenage_dr</th>\
                        <td>' + (feature.properties['teenage_dr'] !== null ? autolinker.link(String(feature.properties['teenage_dr']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">older_driv</th>\
                        <td>' + (feature.properties['older_driv'] !== null ? autolinker.link(String(feature.properties['older_driv']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">night_dark</th>\
                        <td>' + (feature.properties['night_dark'] !== null ? autolinker.link(String(feature.properties['night_dark']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">single_veh</th>\
                        <td>' + (feature.properties['single_veh'] !== null ? autolinker.link(String(feature.properties['single_veh']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">distracted</th>\
                        <td>' + (feature.properties['distracted'] !== null ? autolinker.link(String(feature.properties['distracted']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">drowsy_dri</th>\
                        <td>' + (feature.properties['drowsy_dri'] !== null ? autolinker.link(String(feature.properties['drowsy_dri']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">roadway_de</th>\
                        <td>' + (feature.properties['roadway_de'] !== null ? autolinker.link(String(feature.properties['roadway_de']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">YEAR</th>\
                        <td>' + (feature.properties['YEAR'] !== null ? autolinker.link(String(feature.properties['YEAR']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            var content = removeEmptyRowsFromPopupContent(popupContent, feature);
			layer.on('popupopen', function(e) {
				addClassToPopupIfMedia(content, e.popup);
			});
			layer.bindPopup(content, { maxHeight: 400 });
        }

        function style_pedestrian_crashes_2017_5_0() {
            return {
                pane: 'pane_pedestrian_crashes_2017_5',
                radius: 4.0,
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(152,125,183,1.0)',
                interactive: true,
            }
        }
        map.createPane('pane_pedestrian_crashes_2017_5');
        map.getPane('pane_pedestrian_crashes_2017_5').style.zIndex = 405;
        map.getPane('pane_pedestrian_crashes_2017_5').style['mix-blend-mode'] = 'normal';
        var layer_pedestrian_crashes_2017_5 = new L.geoJson(json_pedestrian_crashes_2017_5, {
            attribution: '',
            interactive: true,
            dataVar: 'json_pedestrian_crashes_2017_5',
            layerName: 'layer_pedestrian_crashes_2017_5',
            pane: 'pane_pedestrian_crashes_2017_5',
            onEachFeature: pop_pedestrian_crashes_2017_5,
            pointToLayer: function (feature, latlng) {
                var context = {
                    feature: feature,
                    variables: {}
                };
                return L.circleMarker(latlng, style_pedestrian_crashes_2017_5_0(feature));
            },
        });
        bounds_group.addLayer(layer_pedestrian_crashes_2017_5);
        map.addLayer(layer_pedestrian_crashes_2017_5);
        function pop_pedestrian_crashes_2018_6(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <th scope="row">pk</th>\
                        <td>' + (feature.properties['pk'] !== null ? autolinker.link(String(feature.properties['pk']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">objectid</th>\
                        <td>' + (feature.properties['objectid'] !== null ? autolinker.link(String(feature.properties['objectid']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">crash_id</th>\
                        <td>' + (feature.properties['crash_id'] !== null ? autolinker.link(String(feature.properties['crash_id']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">crash_date</th>\
                        <td>' + (feature.properties['crash_date'] !== null ? autolinker.link(String(feature.properties['crash_date']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">route</th>\
                        <td>' + (feature.properties['route'] !== null ? autolinker.link(String(feature.properties['route']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">milepoint</th>\
                        <td>' + (feature.properties['milepoint'] !== null ? autolinker.link(String(feature.properties['milepoint']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">gcs_lat</th>\
                        <td>' + (feature.properties['gcs_lat'] !== null ? autolinker.link(String(feature.properties['gcs_lat']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">gcs_long</th>\
                        <td>' + (feature.properties['gcs_long'] !== null ? autolinker.link(String(feature.properties['gcs_long']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">main_road_</th>\
                        <td>' + (feature.properties['main_road_'] !== null ? autolinker.link(String(feature.properties['main_road_']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">city</th>\
                        <td>' + (feature.properties['city'] !== null ? autolinker.link(String(feature.properties['city']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">county_nam</th>\
                        <td>' + (feature.properties['county_nam'] !== null ? autolinker.link(String(feature.properties['county_nam']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">crash_seve</th>\
                        <td>' + (feature.properties['crash_seve'] !== null ? autolinker.link(String(feature.properties['crash_seve']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">work_zone_</th>\
                        <td>' + (feature.properties['work_zone_'] !== null ? autolinker.link(String(feature.properties['work_zone_']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">pedestrian</th>\
                        <td>' + (feature.properties['pedestrian'] !== null ? autolinker.link(String(feature.properties['pedestrian']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">bicyclist_</th>\
                        <td>' + (feature.properties['bicyclist_'] !== null ? autolinker.link(String(feature.properties['bicyclist_']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">motorcycle</th>\
                        <td>' + (feature.properties['motorcycle'] !== null ? autolinker.link(String(feature.properties['motorcycle']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">improper_r</th>\
                        <td>' + (feature.properties['improper_r'] !== null ? autolinker.link(String(feature.properties['improper_r']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">unrestrain</th>\
                        <td>' + (feature.properties['unrestrain'] !== null ? autolinker.link(String(feature.properties['unrestrain']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">dui</th>\
                        <td>' + (feature.properties['dui'] !== null ? autolinker.link(String(feature.properties['dui']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">intersecti</th>\
                        <td>' + (feature.properties['intersecti'] !== null ? autolinker.link(String(feature.properties['intersecti']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">wild_anima</th>\
                        <td>' + (feature.properties['wild_anima'] !== null ? autolinker.link(String(feature.properties['wild_anima']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">domestic_a</th>\
                        <td>' + (feature.properties['domestic_a'] !== null ? autolinker.link(String(feature.properties['domestic_a']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">overturn_r</th>\
                        <td>' + (feature.properties['overturn_r'] !== null ? autolinker.link(String(feature.properties['overturn_r']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">commercial</th>\
                        <td>' + (feature.properties['commercial'] !== null ? autolinker.link(String(feature.properties['commercial']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">teenage_dr</th>\
                        <td>' + (feature.properties['teenage_dr'] !== null ? autolinker.link(String(feature.properties['teenage_dr']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">older_driv</th>\
                        <td>' + (feature.properties['older_driv'] !== null ? autolinker.link(String(feature.properties['older_driv']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">night_dark</th>\
                        <td>' + (feature.properties['night_dark'] !== null ? autolinker.link(String(feature.properties['night_dark']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">single_veh</th>\
                        <td>' + (feature.properties['single_veh'] !== null ? autolinker.link(String(feature.properties['single_veh']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">distracted</th>\
                        <td>' + (feature.properties['distracted'] !== null ? autolinker.link(String(feature.properties['distracted']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">drowsy_dri</th>\
                        <td>' + (feature.properties['drowsy_dri'] !== null ? autolinker.link(String(feature.properties['drowsy_dri']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">roadway_de</th>\
                        <td>' + (feature.properties['roadway_de'] !== null ? autolinker.link(String(feature.properties['roadway_de']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">YEAR</th>\
                        <td>' + (feature.properties['YEAR'] !== null ? autolinker.link(String(feature.properties['YEAR']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            var content = removeEmptyRowsFromPopupContent(popupContent, feature);
			layer.on('popupopen', function(e) {
				addClassToPopupIfMedia(content, e.popup);
			});
			layer.bindPopup(content, { maxHeight: 400 });
        }

        function style_pedestrian_crashes_2018_6_0() {
            return {
                pane: 'pane_pedestrian_crashes_2018_6',
                radius: 4.0,
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(243,166,178,1.0)',
                interactive: true,
            }
        }
        map.createPane('pane_pedestrian_crashes_2018_6');
        map.getPane('pane_pedestrian_crashes_2018_6').style.zIndex = 406;
        map.getPane('pane_pedestrian_crashes_2018_6').style['mix-blend-mode'] = 'normal';
        var layer_pedestrian_crashes_2018_6 = new L.geoJson(json_pedestrian_crashes_2018_6, {
            attribution: '',
            interactive: true,
            dataVar: 'json_pedestrian_crashes_2018_6',
            layerName: 'layer_pedestrian_crashes_2018_6',
            pane: 'pane_pedestrian_crashes_2018_6',
            onEachFeature: pop_pedestrian_crashes_2018_6,
            pointToLayer: function (feature, latlng) {
                var context = {
                    feature: feature,
                    variables: {}
                };
                return L.circleMarker(latlng, style_pedestrian_crashes_2018_6_0(feature));
            },
        });
        bounds_group.addLayer(layer_pedestrian_crashes_2018_6);
        map.addLayer(layer_pedestrian_crashes_2018_6);
        function pop_pedestrian_crashes_2019_7(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['pk'] !== null ? autolinker.link(String(feature.properties['pk']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['objectid'] !== null ? autolinker.link(String(feature.properties['objectid']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['crash_id'] !== null ? autolinker.link(String(feature.properties['crash_id']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['crash_date'] !== null ? autolinker.link(String(feature.properties['crash_date']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['route'] !== null ? autolinker.link(String(feature.properties['route']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['milepoint'] !== null ? autolinker.link(String(feature.properties['milepoint']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['gcs_lat'] !== null ? autolinker.link(String(feature.properties['gcs_lat']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['gcs_long'] !== null ? autolinker.link(String(feature.properties['gcs_long']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['main_road_'] !== null ? autolinker.link(String(feature.properties['main_road_']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['city'] !== null ? autolinker.link(String(feature.properties['city']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['county_nam'] !== null ? autolinker.link(String(feature.properties['county_nam']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['crash_seve'] !== null ? autolinker.link(String(feature.properties['crash_seve']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['work_zone_'] !== null ? autolinker.link(String(feature.properties['work_zone_']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['pedestrian'] !== null ? autolinker.link(String(feature.properties['pedestrian']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['bicyclist_'] !== null ? autolinker.link(String(feature.properties['bicyclist_']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['motorcycle'] !== null ? autolinker.link(String(feature.properties['motorcycle']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['improper_r'] !== null ? autolinker.link(String(feature.properties['improper_r']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['unrestrain'] !== null ? autolinker.link(String(feature.properties['unrestrain']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['dui'] !== null ? autolinker.link(String(feature.properties['dui']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['intersecti'] !== null ? autolinker.link(String(feature.properties['intersecti']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['wild_anima'] !== null ? autolinker.link(String(feature.properties['wild_anima']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['domestic_a'] !== null ? autolinker.link(String(feature.properties['domestic_a']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['overturn_r'] !== null ? autolinker.link(String(feature.properties['overturn_r']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['commercial'] !== null ? autolinker.link(String(feature.properties['commercial']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['teenage_dr'] !== null ? autolinker.link(String(feature.properties['teenage_dr']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['older_driv'] !== null ? autolinker.link(String(feature.properties['older_driv']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['night_dark'] !== null ? autolinker.link(String(feature.properties['night_dark']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['single_veh'] !== null ? autolinker.link(String(feature.properties['single_veh']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['distracted'] !== null ? autolinker.link(String(feature.properties['distracted']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['drowsy_dri'] !== null ? autolinker.link(String(feature.properties['drowsy_dri']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['roadway_de'] !== null ? autolinker.link(String(feature.properties['roadway_de']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['YEAR'] !== null ? autolinker.link(String(feature.properties['YEAR']).replace(/'/g, '\'').replace(/"/g, '&quot;').toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            var content = removeEmptyRowsFromPopupContent(popupContent, feature);
			layer.on('popupopen', function(e) {
				addClassToPopupIfMedia(content, e.popup);
			});
			layer.bindPopup(content, { maxHeight: 400 });
        }

        function style_pedestrian_crashes_2019_7_0() {
            return {
                pane: 'pane_pedestrian_crashes_2019_7',
                radius: 4.0,
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(213,180,60,1.0)',
                interactive: true,
            }
        }
        map.createPane('pane_pedestrian_crashes_2019_7');
        map.getPane('pane_pedestrian_crashes_2019_7').style.zIndex = 407;
        map.getPane('pane_pedestrian_crashes_2019_7').style['mix-blend-mode'] = 'normal';
        var layer_pedestrian_crashes_2019_7 = new L.geoJson(json_pedestrian_crashes_2019_7, {
            attribution: '',
            interactive: true,
            dataVar: 'json_pedestrian_crashes_2019_7',
            layerName: 'layer_pedestrian_crashes_2019_7',
            pane: 'pane_pedestrian_crashes_2019_7',
            onEachFeature: pop_pedestrian_crashes_2019_7,
            pointToLayer: function (feature, latlng) {
                var context = {
                    feature: feature,
                    variables: {}
                };
                return L.circleMarker(latlng, style_pedestrian_crashes_2019_7_0(feature));
            },
        });
        bounds_group.addLayer(layer_pedestrian_crashes_2019_7);
        map.addLayer(layer_pedestrian_crashes_2019_7);
        var overlaysTree = [
            {label: '<img src="legend/pedestrian_crashes_2019_7.png" /> pedestrian_crashes_2019', layer: layer_pedestrian_crashes_2019_7},
            {label: '<img src="legend/pedestrian_crashes_2018_6.png" /> pedestrian_crashes_2018', layer: layer_pedestrian_crashes_2018_6},
            {label: '<img src="legend/pedestrian_crashes_2017_5.png" /> pedestrian_crashes_2017', layer: layer_pedestrian_crashes_2017_5},
            {label: '<img src="legend/pedestrian_crashes_2016_4.png" /> pedestrian_crashes_2016', layer: layer_pedestrian_crashes_2016_4},
            {label: '<img src="legend/pedestrian_crashes_2015_3.png" /> pedestrian_crashes_2015', layer: layer_pedestrian_crashes_2015_3},
            {label: '<img src="legend/census_tracts_2.png" /> census_tracts', layer: layer_census_tracts_2},
            {label: '<img src="legend/SLCo_boundary_1.png" /> SLCo_boundary', layer: layer_SLCo_boundary_1},
            {label: "Carto Light", layer: layer_CartoLight_0},]
        var lay = L.control.layers.tree(null, overlaysTree,{
            //namedToggle: true,
            //selectorBack: false,
            //closedSymbol: '&#8862; &#x1f5c0;',
            //openedSymbol: '&#8863; &#x1f5c1;',
            //collapseAll: 'Collapse all',
            //expandAll: 'Expand all',
            collapsed: false, 
        });
        lay.addTo(map);
		document.addEventListener("DOMContentLoaded", function() {
            // set new Layers List height which considers toggle icon
            function newLayersListHeight() {
                var layerScrollbarElement = document.querySelector('.leaflet-control-layers-scrollbar');
                if (layerScrollbarElement) {
                    var layersListElement = document.querySelector('.leaflet-control-layers-list');
                    var originalHeight = layersListElement.style.height 
                        || window.getComputedStyle(layersListElement).height;
                    var newHeight = parseFloat(originalHeight) - 50;
                    layersListElement.style.height = newHeight + 'px';
                }
            }
            var isLayersListExpanded = true;
            var controlLayersElement = document.querySelector('.leaflet-control-layers');
            var toggleLayerControl = document.querySelector('.leaflet-control-layers-toggle');
            // toggle Collapsed/Expanded and apply new Layers List height
            toggleLayerControl.addEventListener('click', function() {
                if (isLayersListExpanded) {
                    controlLayersElement.classList.remove('leaflet-control-layers-expanded');
                } else {
                    controlLayersElement.classList.add('leaflet-control-layers-expanded');
                }
                isLayersListExpanded = !isLayersListExpanded;
                newLayersListHeight()
            });	
			// apply new Layers List height if toggle layerstree
			if (controlLayersElement) {
				controlLayersElement.addEventListener('click', function(event) {
					var toggleLayerHeaderPointer = event.target.closest('.leaflet-layerstree-header-pointer span');
					if (toggleLayerHeaderPointer) {
						newLayersListHeight();
					}
				});
			}
            // Collapsed/Expanded at Start to apply new height
            setTimeout(function() {
                toggleLayerControl.click();
            }, 10);
            setTimeout(function() {
                toggleLayerControl.click();
            }, 10);
            // Collapsed touch/small screen
            var isSmallScreen = window.innerWidth < 650;
            if (isSmallScreen) {
                setTimeout(function() {
                    controlLayersElement.classList.remove('leaflet-control-layers-expanded');
                    isLayersListExpanded = !isLayersListExpanded;
                }, 500);
            }  
        });       
        setBounds();
        </script>
    </body>
</html>
